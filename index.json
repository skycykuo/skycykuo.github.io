[{"categories":["code"],"contents":"Python 程序的執行方式 交互式 在命令行輸入指令，回車即可得到結果。   打開終端\n  進入交互式：python3\n  編寫代碼： print(“hello world”)\n  離開交互式：exit()\n  執行過程 計算機只能識別機器碼(1010)，不能識別源代碼(python)。   由源代碼轉變成機器碼的過程分成兩類：編譯和解釋。\n  編譯：在程序運行之前，通過編譯器將源代碼變成機器碼，例如：C 語言。\n\u0026ndash; 優點：運行速度快\n\u0026ndash; 缺點：開發效率低，不能跨平台。\n  解釋：在程序運行之時，通過解釋器對程序逐行翻譯，然後執行。例如 Javascript\n\u0026ndash; 優點：開發效率高，可以跨平台；\n\u0026ndash; 缺點：運行速度慢。\n  python 是解釋型語言，但為了提高運行速度，使用了一種編譯的方法。編譯之後得到 pyc 文件，存儲了字節碼（特定於 Python 的表現形式，不是機器碼）。\n源代碼 \u0026ndash; 編譯 \u0026ndash;\u0026gt; 字節碼 \u0026ndash; 解釋 \u0026ndash;\u0026gt; 機器碼\n|————1 次———|\n  ","permalink":"https://skycykuo.github.io/blog/pythonl1/","tags":["Python"],"title":"Python入門"},{"categories":["code"],"contents":"變量   定義：關聯一個對象的標識符。\n  命名：必須是字母或下劃線開頭，後跟字母、數字、下劃線。 不能使用關鍵字(藍色)，否則發生語法錯誤：SyntaxError: invalid syntax。\n  建議命名：字母小寫，多個單詞以下劃線隔開。 class_name\n  賦值：創建一個變量或改變一個變量關聯的數據。\n  語法：\n 變量名 = 數據 變量名 1 = 變量名 2 = 數據 變量名 1, 變量名 2, = 數據 1, 數據 2    ","permalink":"https://skycykuo.github.io/blog/pythonl2/","tags":["Python"],"title":"Python Variable"},{"categories":["code"],"contents":"核心數據類型 1. 在 python 中變量沒有類型，但關聯的對象有類型。 2. 通過 type 函數可查看。  空值對象 None 1. 表示不存在的特殊對象。 2. 作用：占位和解除與對象的關聯。  整形 int 1. 表示整數，包含正數、負數、0。 如： -5, 100, 0 2. 字面值： 十進制：5 二進制：0b 開頭，後跟 1 或者 1 八進制：0o 開頭，後跟 0~7 十六進制：0x 開頭，後跟 0~9,A~F,a~f 3. 小整數對象池：CPython 中整數 -5 至 256,永遠存在小整數對象池中,不會被釋放 並可重覆使用。  浮點型 float 1. 表示小數，包含正數、負數，0.0)。 2. 字面值： 小數：1.0 2.5 科學計數法：e/E (正負號) 指數 1.23e-2 (等同於 0.0123) 1.23456e5(等同於 123456.0)  字符串 str 是用來記錄文本信息(文字信息)。 字面值：雙引號  複數 complex 由實部和虛部組成的數字。 虛部是以 j 或 J 結尾。 字面值： 1j 1+1j 1-1j  布爾 bool 用來表示真和假的類型 True 表示真(條件滿足或成立)，本質是 1 False 表示假(條件不滿足或不成立)，本質是0  數據類型轉換 1. 轉換為整形: int(數據) 2. 轉換為浮點型:float(數據) 3. 轉換為字符串:str(數據) 4. 轉換為布爾:bool(數據) 結果為 False：bool(0) bool(0.0) 5. 混合類型自動升級： 1 + 2.14 返回的結果是 3.14 1 + 3.0 返回結果是: 4.0 ","permalink":"https://skycykuo.github.io/blog/pythonl3/","tags":["Python"],"title":"Python Data Type"},{"categories":["code"],"contents":"運算符 算術運算符 + 加法 - 減法 * 乘法 / 除法：結果為浮點數 // 地板除：除的結果去掉小數部分 % 求余 ** 冪運算  優先級從高到低： () ** * / % // + -  增強運算符 y += x 等同於 y=y+x y -= x 等同於 y=y-x y *= x 等同於 y=y*x y /= x 等同於 y=y/x y //= x 等同於 y=y//x y %= x 等同於 y=y%x y **= x 等同於 y=y**x  # 1. 算數運算+ - * / // % ** number01 = 5 number02 = 2 print(number01 / number02) # 除到余數為零的商 2.5 print(number01 // number02) # 除到整數商 2 print(number01 % number02) # 獲取余數 1 print(number01 ** number02) # 冪運算 25 # 2. 增強運算+= -= *= /= //= %= **= # number01 = number01 + 10 # 變量 與 其他數據運算後的結果，又賦值給了自身 number01 += 10 print(number01) 2.5 2 1 25 15 比較運算符 \u0026lt; 小於 \u0026lt;= 小於等於 \u0026gt; 大於 \u0026gt;= 大於等於 == 等於 != 不等於  返回布爾類型的值 的數學表示方式:0 \u0026lt;= x \u0026lt;= 100  邏輯運算符 與 and 表示並且的關系，一假俱假。 示例: True and True # True True and False # False False and True # False False and False # False 或 or 表示或者的關系，一真俱真 示例: True or True # True True or False # True False or True # True False or False # False 非 not 表示取反 例如： not True # 返回 False not False # 返回 True 短路运算 一但结果确定，后面的语句将不再执行。  身份運算符 語法: x is y x is not y 作用： is 用於判斷兩個對象是否是同一個對象,是時返回 True,否則返回 False。 is not 的作用與 is 相反  優先級 高到低： 算數運算符 比較運算符 快捷運算符 身份運算符 邏輯運算符 ","permalink":"https://skycykuo.github.io/blog/pythonl4/","tags":["Python"],"title":"Python Operators"},{"categories":["code"],"contents":"行 1. 物理行：程序員編寫代碼的行。 2. 邏輯行：python 解釋器需要執行的指令。 3. 建議一個邏輯行在一個物理行上。 4. 如果一個物理行中使用多個邏輯行，需要使用分號；隔開。 5. 如果邏輯行過長，可以使用隱式換行或顯式換行。 隱式換行：所有括號的內容換行,稱為隱式換行 括號包括: () [] {} 三種 顯式換行：通過折行符 \\ (反斜杠)換行，必須放在一行的末尾，目的是告訴解 釋器,下一行也是本行的語句。  pass 語句 通常用来填充語法空白。  # 三個物理行 三個邏輯行 a = 1 b = a + 1 c = a + b # 一個物理行 三個邏輯行 a = 1;b = a + 1;c = a + b # 三個物理行 一個邏輯行 a = 1+2+\\ 3+\\ 4+5+6 a = (1+2+ 3+4+5+6) If elif else 語句 1. 作用: 讓程序根據條件選擇性的執行語句。 2. 語法: if 條件 1: 語句塊 1 elif 條件 2: 語句塊 2 else: 語句塊 3 3. 說明: elif 子句可以有 0 個或多個。 else 子句可以有 0 個或 1 個，且只能放在 if 語句的最後。  if 語句的真值表達式 if 100: print(\u0026quot;真值\u0026quot;) 等同於 if bool(100): print(\u0026quot;真值\u0026quot;) 條件表達式 語法： 變量 = 結果1 if 條件 else 結果2 作用： 根據條件(True/False) 來決定返回結果1還是結果2。  \u0026#34;\u0026#34;\u0026#34; 在終端中依次錄入4個同學體重，打印最重的值。 思路： 假設第一個就是最大的. 使用假設的依次與後幾個變量進行比較,如果發現更大的，則替換假設的。 輸入：52、40、37、60 輸出：60 \u0026#34;\u0026#34;\u0026#34; number_one = float(input(\u0026#34;請輸入第一個同學體重：\u0026#34;)) number_two = float(input(\u0026#34;請輸入第二個同學體重：\u0026#34;)) number_three = float(input(\u0026#34;請輸入第三個同學體重：\u0026#34;)) number_four = float(input(\u0026#34;請輸入第四個同學體重：\u0026#34;)) max_value = number_one if max_value \u0026lt; number_two: max_value = number_two if max_value \u0026lt; number_three: max_value = number_three if max_value \u0026lt; number_four: max_value = number_four print(max_value) ","permalink":"https://skycykuo.github.io/blog/pythonl5/","tags":["Python"],"title":"Python Condition Statements"},{"categories":["code"],"contents":"while語句 1.作用: 可以讓一段代碼滿足條件，重覆執行。 2.語法: while 條件: 滿足條件執行的語句 else: 不滿足條件執行的語句 3.說明: else子句可以省略。 在循環體內用break終止循環時,else子句不執行。  跳轉語句 break 語句 1.跳出循環體，後面的代碼不再執行。 2.可以讓while語句的else部分不執行。 continue 語句 跳過本次，繼續下次循環。  for 語句 1.作用: 用來遍歷可叠代對象的數據元素。 可叠代對象是指能依次獲取數據元素的對象，例如：容器類型。 2.語法: for 變量列表 in 可叠代對象: 語句塊1 else: 語句塊2 3.說明: else子句可以省略。 在循環體內用break終止循環時,else子句不執行。  range 函數 1.作用: 用來創建一個生成一系列整數的可叠代對象(也叫整數序列生成器)。 2.語法: range(開始點，結束點，間隔) 3.說明: 函數返回的可叠代對象可以用for取出其中的元素 返回的數字不包含結束點 開始點默認為0 間隔默認值為1  \u0026#34;\u0026#34;\u0026#34; 一個小球從100m的高度落下，每次彈回原高度一半。 請計算： 總共經過多少次，最終落地(最小彈起高度0.01m) 總共經過多少米。 \u0026#34;\u0026#34;\u0026#34; height = 100 count = 0 distance = height # 判斷彈起來高度 while height / 2 \u0026gt; 0.01: height /= 2 # 彈回原高度一半 count += 1 print(\u0026#34;第\u0026#34; + str(count) + \u0026#34;次彈起來的高度是\u0026#34; + str(height) + \u0026#34;.\u0026#34;) distance += height * 2 # 累加起落距離 print(\u0026#34;總共經過\u0026#34; + str(count) + \u0026#34;次\u0026#34;) print(\u0026#34;總共經過\u0026#34; + str(distance) + \u0026#34;米\u0026#34;) ","permalink":"https://skycykuo.github.io/blog/pythonl6/","tags":["Python"],"title":"Python Loop Statements"},{"categories":["Music"],"contents":"   ","permalink":"https://skycykuo.github.io/blog/relaxing_music/","tags":["Piano"],"title":"Relaxing"},{"categories":["code"],"contents":"Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://skycykuo.github.io/blog/markdownl/","tags":["Markdown"],"title":"Markdown Learning"}]